%compile_2_color_analysis
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%this script:
%1) loads the localization files (loc3) from a series of 2-color datasets (hi-res lightsheet data of Timeless mRNA in both
%   Cy3/Cy5)
%2) computes the intensity histograms and plots them (one window per dataset, with both channels in each window)
%3) performs a 2-component fit of the intensity in each dataset
%   (2-lognormal), computes the expected Jaccard
%4) computes the pairwise distances between all 2-color spot pairs from the
%   same dataset, plots distrivution.
%5) matches colocalized spot pairs (nearest neighbors + threshold).
%6) computes offset and achromatic aberrations between channels for each
%dataset
%7) rerun the script from step 4) after running once to apply the coordinate
%coorrections

%make sure the 'useful' folder is on the path.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%some useful output variables:
%maxjac1 lists the jaccard (at the optimal threshold) for each dataset in
    %channel 1, based on the 2-component fitting of each 1-color histogram
    
%maxjac2 lists the jaccard (at the optimal threshold) for each dataset in 
    %channel 2, based on the 2-component fitting of each 1-color histogram

%thresh1 is the value of the intensity threshold that maximizes the (fit-based) jaccard
%in channel1 for each dataset

%thresh1 is the value of the intensity threshold that maximizes the (fit-based) jaccard
%in channel2 for each dataset

% dx12{i} = x1 - x2 distance along x axis between all spots of ith dataset 
% dy12{i} = y1 - y2 distance along y axis between all spots of ith dataset
% dz12{i} = z1 - z2 distance along z axis between all spots of ith dataset
% dx12corr{i} = same as dx12{i} but corrected for offset and aberrations
    % (need to run script twice)
% dy12corr{i} = same as dy12{i} but corrected for offset and aberrations
    % (need to run script twice)
% dz12corr{i} = same as dz12{i} but corrected for offset and aberrations
    % (need to run script twice)
% dr12{i} = sqrt(dx12^2 + dy12^2 + dz12^2)
% dr12corr{i} = same as dr12{i} but corrected for offset and aberrations
    % (need to run script twice)
    
%Idx{k} : list of matched spot pairs for kth dataset:
    %col 1: index of channel 1 spot (0 for channel 2 spot that doesnt
    %have a channel 1 counterpart)
    %col 2: index j of nearest channel 2 neighbor found for spot in channel
    %1 (0 if no channel 2 counterpart)
    %col 3: distance dr = distance (corrected) betwenn spot i in channel 1 and spot j in
        %channel 2
    %col 4: 1 if the pair is valid (i.e. below the distance threshold, and the
        %spots are engaged in only one pair), 0 otherwise.
    %col 5: dx = xspot_i_in_channel1 - xspot_j_in_channel2 (corrected for offset and aberrations)
    %col 6: dy = yspot_i_in_channel1 - yspot_j_in_channel2 (corrected for offset and aberrations)
    %col 7: dz = zspot_i_in_channel1 - zspot_j_in_channel2 (corrected for offset and aberrations)
    %col 8: xspot_i_in_channel1 (corrected for offset and aberrations)
    %col 9: yspot_i_in_channel1 (corrected for offset and aberrations)
    %col 10: zspot_i_in_channel1 (corrected for offset and aberrations)
    %col 11: xspot_j_in_channel2
    %col 12: yspot_j_in_channel2
    %col 13: zspot_j_in_channel2
    %col 14: distance dr = distance (not corrected) betwenn spot i in channel 1 and spot j in
        %channel 2
        
% nmatches(k) = number of matched spots in each dataset
% frac_coloc1(k) = (# of spots channel 1 with a match) / (total # of
    % spots channel 1) for kth dataset
% frac_coloc2(k) = (# of spots channel 2 with a match) / (total # of
    % spots channel 2) for kth dataset
% jacc12(k) = jaccard between channel 1 and channel 2 for kth dataset

%offset(i,1:3) = dx, dy dz average coordinate offset between channel 1 and 2 for ith dataset

%params_dx(k,1:6) holds the parameters for the quadratic offset model:
    %dx = a*x^2 + b*x^2 + c*x*y + d*x +e*y +f*z  
%params_dy(k,1:6) same as dx but for dy
%params_dz(k,1:6) same as dx but for dz

plot_all_figures = 0;
%% 1) load loc files for the 3 datasets (each dataset 2 color)
%note that loc files have been generated by running AIRLOCALIZE in bacth
%mode
c1files = get_clean_file_list('/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/',{'C1','loc3'}, {'C2'},0,0);

%This is the file list generated (for future reference) - note that the
%last 3 files seem to be completely off in terms of threshold, prob
%different imaging. IGNORE!
%{'/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_lh_dorsal_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_lh_lLNv_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_lh_ol_mid_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_lh_ol_top_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_lh_sLNv_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_rh_dorsal_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_rh_lLNv_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_rh_ol_bot_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_rh_ol_top_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s1_rh_sLNv_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_lh_dorsal_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_lh_lLNv_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_lh_ol_bot_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_lh_ol_mid_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_lh_ol_top_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_rh_dorsal_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_rh_lLNv_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_rh_ol_bot_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_rh_ol_mid_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_tim2c_r1s2_rh_ol_top_recon_trim_pos0.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_timcy5_r1s6_lh_all_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_timcy5_r1s6_rh_lLNv_recon_trim.loc3';
% '/Users/lionnett/Documents/Salina Long/two_color/110416/color_separated_images/C1-comp_timcy5_r1s6_rh_sLNv_recon_trim_pos0.loc3'}

%generate channel 2 dataset names by replacing the C1 string by C2
c2files = {'';'';'';};
for i=1:numel(c1files)
    c2files{i} = strrep(c1files{i},'C1','C2');
end

%load all the loc files
loc1 = '';
loc2 = '';
for i=1:numel(c1files)
    loc1{i} = dlmread(c1files{i});
    loc2{i} = dlmread(c2files{i});
end

%% parameters
%bin size for intensity histograms
binsize1 = 2000;
binsize2 = 2000;

%maximum displayed x cvalue for histograms
xmax1_for_plot = 5e6;
xmax2_for_plot = 2e6;

%guess fit values for 2 component lognormal function 
% y = A1 * exp( -(log(x) - I01).^2 / (2*s01^2) ) +  A2 * exp( -(log(x) - I02).^2 / (2*s02^2) )

%these guesses and fit bounds inputs correspond to the values read on the axis (will be log-
%transformed later)

%Defaults channel 1
A1guess1 = 350;
I01guess1 = 0.7e5;
s01guess1 = 1.5e4;

A2guess1 = 50;
I02guess1 = 1.7e5;
s02guess1 = 1e5;

Coeffs1 =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
lb1 =       [150,       1,          5e4,        1e5,        0,          0];
ub1 =       [1000,      70,         1e5,        4e5,        5e4,        5e5];

%Defaults channel 2
A1guess2 = 350;
I01guess2 = 1.4e5;
s01guess2 = 2e4;

A2guess2 = 50;
I02guess2 = 2.7e5;
s02guess2 = 5e5;

Coeffs2 =   [A1guess2,  A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
lb2 =       [150,       1,          1e5,        1.5e5,      0,          0];
ub2 =       [700,       50,         1.5e5,      5e5,        5e4,        5e6];

%replicate to populate structure of dataset-specifc parameters
Coeffs1 = repmat({Coeffs1}, size(loc1));
Coeffs2 = repmat({Coeffs2}, size(loc2));
ub1 = repmat({ub1},size(loc1));
ub2 = repmat({ub2},size(loc2));
lb1 = repmat({lb1},size(loc1));
lb2 = repmat({lb2},size(loc2));

% set non-default dataset specific parameters (turn dataset_sepcific to
% zero to ignore, since this is specific to one particula dataset
dataset_specific = 1;
if dataset_specific 

    %     
    i=1;
    A1guess1 = 100;
    I01guess1 = 7e4;
    s01guess1 = 1e4;

    A2guess1 = 20;
    I02guess1 = 1.5e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [150,       5,          5e4,        1e5,        0,          0];
    ub1{i} =       [1000,      70,         1e5,        4e5,        5e4,        5e5];

    A1guess2 = 15;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 20;
    I02guess2 = 3.3e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,  A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [10,       10,         1.3e5,     2.5e5,      0,          0];
    ub2{i} =       [25,       25,         1.8e5,     5e5,        5e4,        5e6];
    
    %     
    i=3;
    A1guess1 = 100;
    I01guess1 = 7e4;
    s01guess1 = 1e4;

    A2guess1 = 10;
    I02guess1 = 1.5e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [150,       1,          5e4,        1e5,        0,          0];
    ub1{i} =       [1200,      20,         1e5,        3e5,        5e4,        5e5];

    A1guess2 = 150;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 20;
    I02guess2 = 3.8e5;
    s02guess2 = 1e5;

    Coeffs2{i} =   [A1guess2,  A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [100,       1,          1.3e5,     2.5e5,      0,          0];
    ub2{i} =       [200,       30,         1.8e5,     5e5,        5e4,        5e5];
    
    %     
    i=8;
    A1guess1 = 1200;
    I01guess1 = 6e4;
    s01guess1 = 1e4;

    A2guess1 = 10;
    I02guess1 = 1.5e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [1000,       1,         5e4,        1.3e5,        0,          0];
    ub1{i} =       [1400,      20,         8e4,        3e5,        5e4,        5e5];

    A1guess2 = 150;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 10;
    I02guess2 = 4e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,  A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [600,       1,          1.3e5,     2.3e5,      0,          0];
    ub2{i} =       [1000,      25,         1.8e5,     6e5,        1e5,        5e6];
    
    %     
    i=10;
    A1guess1 = 320;
    I01guess1 = 7e4;
    s01guess1 = 1e4;

    A2guess1 = 70;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [250,       10,         6e4,        1e5,        0,          0];
    ub1{i} =       [350,      100,         8e4,        1.8e5,      5e4,        5e5];

    A1guess2 = 700;
    I01guess2 = 1.5e5;
    s01guess2 = 2e4;

    A2guess2 = 40;
    I02guess2 = 3.5e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [600,        10,          1.3e5,      2e5,      0,          0];
    ub2{i} =       [800,        100,         1.8e5,      5e5,      1e5,        5e6];
    
    %     
    i=11;
    A1guess1 = 120;
    I01guess1 = 7e4;
    s01guess1 = 1e4;

    A2guess1 = 50;
    I02guess1 = 1.5e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [100,       10,         6e4,        1.2e5,      0,          0];
    ub1{i} =       [150,      100,         8e4,        1.8e5,      5e4,        5e5];

    A1guess2 = 40;
    I01guess2 = 1.5e5;
    s01guess2 = 2e4;

    A2guess2 = 40;
    I02guess2 = 2.7e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [30,        10,          1.3e5,      2e5,      0,          0];
    ub2{i} =       [50,        100,         1.8e5,      5e5,      1e5,        5e6];
    
    %     
    i=12;
    A1guess2 = 80;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 30;
    I02guess2 = 2.8e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [60,        10,          1.2e5,      1.9e5,      0,          0];
    ub2{i} =       [90,        100,         1.6e5,      5e5,      1e5,        5e6];
    
    %     
    i=13;
    A1guess2 = 50;
    I01guess2 = 1.5e5;
    s01guess2 = 2e4;

    A2guess2 = 15;
    I02guess2 = 2.8e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [30,        5,          1.2e5,      2e5,      0,          0];
    ub2{i} =       [60,        30,         1.7e5,      5e5,      1e5,        5e6];
    
    %     
    i=14;
    A1guess2 = 80;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 15;
    I02guess2 = 3e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [60,        5,          1.2e5,      2e5,      0,          0];
    ub2{i} =       [100,       30,        1.6e5,      5e5,      1e5,        5e6];
    
     %     
    i=15;
    A1guess2 = 100;
    I01guess2 = 1.5e5;
    s01guess2 = 2e4;

    A2guess2 = 30;
    I02guess2 = 3e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [60,        5,          1.2e5,      2e5,      0,          0];
    ub2{i} =       [150,       60,        1.7e5,      5e5,      1e5,        5e6];
    
    %     
    i=16;
    A1guess1 = 60;
    I01guess1 = 7e4;
    s01guess1 = 1e4;

    A2guess1 = 30;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [40,       10,         6e4,        1e5,      0,          0];
    ub1{i} =       [80,      100,         9e4,        2.3e5,      5e4,        5e5];

    A1guess2 = 55;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 25;
    I02guess2 = 2.9e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [30,        10,          1.2e5,      2e5,      0,          0];
    ub2{i} =       [70,        100,         1.6e5,      5e5,      1e5,        5e6];
    
    %     
    i=18;
    A1guess1 = 800;
    I01guess1 = 6e4;
    s01guess1 = 1e4;

    A2guess1 = 30;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [600,       10,         5e4,        1e5,      0,          0];
    ub1{i} =       [1000,      100,        7e4,        2.3e5,      5e4,        5e5];

    A1guess2 = 550;
    I01guess2 = 1.4e5;
    s01guess2 = 2e4;

    A2guess2 = 25;
    I02guess2 = 2.9e5;
    s02guess2 = 0.5e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [400,        10,          1.3e5,      2e5,      0,          0];
    ub2{i} =       [700,        100,         1.6e5,      5e5,      1e5,        5e6];
    
    %     
    i=21;
    A1guess1 = 4000;
    I01guess1 = 1.1e5;
    s01guess1 = 1e4;

    A2guess1 = 30;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [3000,      10,        1e5,        1e5,      0,          0];
    ub1{i} =       [5000,      100,        1.3e5,        2.3e5,      5e4,        5e5];

    A1guess2 = 60;
    I01guess2 = 1.8e5;
    s01guess2 = 2e4;

    A2guess2 = 20;
    I02guess2 = 1.3e6;
    s02guess2 = 4e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [30,        1,          1.5e5,      2e5,      0,          0];
    ub2{i} =       [80,        100,         2.3e5,     2e6,      2e5,        5e6];
    
    %     
    i=22;
    A1guess1 = 5000;
    I01guess1 = 8e4;
    s01guess1 = 1e4;

    A2guess1 = 30;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [4000,      10,        7e4,        1e5,      0,          0];
    ub1{i} =       [6000,      100,        9e4,        2.3e5,      5e4,        5e5];

    A1guess2 = 80;
    I01guess2 = 1.6e5;
    s01guess2 = 2e4;

    A2guess2 = 10;
    I02guess2 = 1e6;
    s02guess2 = 4e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [40,        1,          1.3e5,      5e5,      0,          0];
    ub2{i} =       [100,       100,         1.7e5,     2e6,      2e5,        5e6];
    
    %     
    i=23;
    A1guess1 = 4000;
    I01guess1 = 8.5e4;
    s01guess1 = 1e4;

    A2guess1 = 30;
    I02guess1 = 1.3e5;
    s02guess1 = 0.5e5;
    
    Coeffs1{i} =   [A1guess1,  A2guess1,   I01guess1,  I02guess1,  s01guess1,  s02guess1];
    lb1{i} =       [3000,      10,        7.5e4,        1e5,      0,          0];
    ub1{i} =       [5000,      100,        9.5e4,        2.3e5,      5e4,        5e5];

    A1guess2 = 80;
    I01guess2 = 1.5e5;
    s01guess2 = 2e4;

    A2guess2 = 10;
    I02guess2 = 3.5e5;
    s02guess2 = 4e5;

    Coeffs2{i} =   [A1guess2,   A2guess2,   I01guess2,  I02guess2,  s01guess2,  s02guess2];
    lb2{i} =       [40,        1,           1.3e5,      2e5,      0,          0];
    ub2{i} =       [100,       100,         1.7e5,     1e6,      2e5,        5e6];
    
end

%log-transform guesstimates
for i=1:numel(Coeffs1)
    Coeffs1{i}(3:end) = log(Coeffs1{i}(3:end));
    ub1{i}(3:end) = log(ub1{i}(3:end));
    lb1{i}(3:end) = log(lb1{i}(3:end));
    
    Coeffs2{i}(3:end) = log(Coeffs2{i}(3:end));
    ub2{i}(3:end) = log(ub2{i}(3:end));
    lb2{i}(3:end) = log(lb2{i}(3:end));
    
end

%% 2) plot Intensity histograms
fh = '';
axes1 = '';
axes2 = '';
for i=1:numel(loc1)
    fh{i} = figure('Name',c1files{i}); 
    height_offset = 0.1;
    plot_height = (1 - 3*height_offset)/2;

    axes1{i} = axes('Parent',fh{i},'Position',[0.2,2*height_offset+1*plot_height,0.6,plot_height],'FontSize',12,'XScale','log');
    hold(axes1{i},'on');
    
    axes2{i} = axes('Parent',fh{i},'Position',[0.2,1*height_offset,0.6,plot_height],'FontSize',12,'XScale','log');
    hold(axes2{i},'on');
    
    %generate histogram data channel 1
    [ydata1{i},xdata1{i}] = hist(loc1{i}(:,4),0:binsize1:max(loc1{i}(:,4)));
    
    %plot hist raw data channel 1
    bar(xdata1{i},ydata1{i},'DisplayName','data','Parent',axes1{i},'LineWidth',2,...
    'FaceColor',[0.6 0.6 0.6],...
    'EdgeColor',[0.6 0.6 0.6]);
    axes(axes1{i});
    xlim([5e4 xmax1_for_plot]);
    ylim([0 max(ydata1{i}(2:end))]);
    
    %generate histogram data channel 2
    [ydata2{i},xdata2{i}] = hist(loc2{i}(:,4),0:binsize2:max(loc2{i}(:,4)));
    
    %plot hist raw data channel 2
    bar(xdata2{i},ydata2{i},'DisplayName','data','Parent',axes2{i},'LineWidth',2,...
    'FaceColor',[0.6 0.6 0.6],...
    'EdgeColor',[0.6 0.6 0.6]);
    axes(axes2{i});
    xlim([5e4 xmax2_for_plot]);
    ylim([0 max(ydata2{i}(2:end))]);
end

%% 3)  fit all histograms to 2-components lognormal (and plot)
y1bg = [];
y1sig = [];
y1tot = [];

y2bg = [];
y2sig = [];
y2tot = [];

for i=1:numel(loc1)

    %fit channel 1 data to 2-component lognormal
    options = optimset('TolX',.001,'MaxIter',1000);
    [Coeffs1{i}(1) idx] = max(ydata1{i}(2:end));
    Coeffs1{i}(3) = log(xdata1{i}(idx+1));
    [Coeffsout1{i}, resnorm]=lsqcurvefit(@multigaussian2, Coeffs1{i}, log(xdata1{i}),ydata1{i},lb1{i},ub1{i},options);

    y1bg{i} = Coeffsout1{i}(1)*exp( -(log(xdata1{i}) - Coeffsout1{i}(3)).^2./(2*Coeffsout1{i}(5)^2));
    y1sig{i} = Coeffsout1{i}(2)*exp( -(log(xdata1{i}) - Coeffsout1{i}(4)).^2./(2*Coeffsout1{i}(6)^2));
    y1tot{i} = y1bg{i}+y1sig{i};
    
    %fit channel 2 data to 2-component lognormal
    options = optimset('TolX',.001,'MaxIter',1000);
    [Coeffs2{i}(1) idx] = max(ydata2{i}(2:end));
    Coeffs2{i}(3) = log(xdata2{i}(idx));
    [Coeffsout2{i}, resnorm]=lsqcurvefit(@multigaussian2, Coeffs2{i}, log(xdata2{i}),ydata2{i},lb2{i},ub2{i},options);

    y2bg{i} = Coeffsout2{i}(1)*exp( -(log(xdata2{i}) - Coeffsout2{i}(3)).^2./(2*Coeffsout2{i}(5)^2));
    y2sig{i} = Coeffsout2{i}(2)*exp( -(log(xdata2{i}) - Coeffsout2{i}(4)).^2./(2*Coeffsout2{i}(6)^2));
    y2tot{i} = y2bg{i}+y2sig{i};
    
    %plot results channel 1
    plot(axes1{i},xdata1{i},y1bg{i},'LineWidth',2);
    plot(axes1{i},xdata1{i},y1sig{i},'LineWidth',2);
    plot(axes1{i},xdata1{i},y1tot{i},'LineWidth',2);
    
    %plot results channel 2
    plot(axes2{i},xdata2{i},y2bg{i},'LineWidth',2);
    plot(axes2{i},xdata2{i},y2sig{i},'LineWidth',2);
    plot(axes2{i},xdata2{i},y2tot{i},'LineWidth',2);
end

%% compute Jaccard and sort out spots based on Jaccard for each channel
%Jaccard is based on modeling both signal and background as lognormal
%distributions
%maxjac1 lists the jaccard (at the optimal threshold) for eahc dataset in channel 1.
%maxjac2 lists the jaccard (at the optimal threshold) for eahc dataset in channel 2.

jacc1 = [];
jacc2 = [];
locsort1 = [];
locsort2 = [];
correction_factor1 = 1.1;
correction_factor2 = 1.15;

for i=1:numel(loc1)
    for j=1:numel(xdata1{i})
        jacc1{i}(j) = sum(y1sig{i}(j:end))/(sum(y1sig{i}(:)) + sum(y1bg{i}(j:end)));
    end
    
    for j=1:numel(xdata2{i})
        jacc2{i}(j) = sum(y2sig{i}(j:end))/(sum(y2sig{i}(:)) + sum(y2bg{i}(j:end)));
    end
    
    [maxjac1(i),thresh1(i)] = max(jacc1{i});
    thresh1(i) = xdata1{i}(thresh1(i));
    thresh1(i) = correction_factor1*thresh1(i);
    [maxjac2(i),thresh2(i)] = max(jacc2{i});
    thresh2(i) = xdata2{i}(thresh2(i));
    thresh2(i) = correction_factor2*thresh2(i);
    
    locsort1{i} = loc1{i}(loc1{i}(:,4)>thresh1(i),:);
    locsort2{i} = loc2{i}(loc2{i}(:,4)>thresh2(i),:);
end


%% 4) compute pairwise distances
%restart here after running the script in its entirety in order to apply
%the offset and aberration correction
use_quad_fit = 1;

if plot_all_figures
    f_dist_offset = figure; 
    hold;
end
offset_binsize = 20; %in nm

%voxel dimensions in nm:
xvox = 88;
yvox = 88;
zvox = 100;

%this is the offset between the channels; computed below in the software;
%run again to use the values computed in the first run.
if ~exist('offset','var')
    offset = zeros(numel(locsort1),3);
end

for i=1:numel(locsort1)
    
    n1 = size(locsort1{i},1);
    n2 = size(locsort2{i},1);
    
    %correct for global offset
    dx_offset{i} =  - offset(i,1);
    dy_offset{i} =  - offset(i,2);
    dz_offset{i} =  - offset(i,3);
    
    %correct for aberrations
    if use_quad_fit && exist('params_dx','var') && exist('params_dy','var') && exist('params_dz','var')
         dx_offset{i}  = repmat(dx_offset{i},size(locsort1{i},1),1) - ( params_dx(i,1)*locsort1{i}(:,1).^2 + ...
             params_dx(i,2)*locsort1{i}(:,2).^2 + params_dx(i,3)*locsort1{i}(:,1).*locsort1{i}(:,2)...
            + params_dx(i,4)*locsort1{i}(:,1) + params_dx(i,5)*locsort1{i}(:,2) + params_dx(i,6));

         dy_offset{i}  = repmat(dy_offset{i},size(locsort1{i},1),1) - ( params_dy(i,1)*locsort1{i}(:,1).^2 + ...
             params_dy(i,2)*locsort1{i}(:,2).^2 + params_dy(i,3)*locsort1{i}(:,1).*locsort1{i}(:,2)...
            + params_dy(i,4)*locsort1{i}(:,1) + params_dy(i,5)*locsort1{i}(:,2) + params_dy(i,6));

         dz_offset{i}  = repmat(dz_offset{i},size(locsort1{i},1),1) - ( params_dz(i,1)*locsort1{i}(:,1).^2 + ...
             params_dz(i,2)*locsort1{i}(:,2).^2 + params_dz(i,3)*locsort1{i}(:,1).*locsort1{i}(:,2)...
            + params_dz(i,4)*locsort1{i}(:,1) + params_dz(i,5)*locsort1{i}(:,2) + params_dz(i,6));
        
    else    
        dx_offset{i}  = repmat(dx_offset{i},size(locsort1{i},1),1);
        dy_offset{i}  = repmat(dy_offset{i},size(locsort1{i},1),1);
        dz_offset{i}  = repmat(dz_offset{i},size(locsort1{i},1),1);
    end

    % compute distance matrices between the two channels
    dx12{i} = xvox*(repmat(locsort1{i}(:,1),1,n2) - repmat(locsort2{i}(:,1)',n1,1));
    dy12{i} = yvox*(repmat(locsort1{i}(:,2),1,n2) - repmat(locsort2{i}(:,2)',n1,1));
    dz12{i} = zvox*(repmat(locsort1{i}(:,3),1,n2) - repmat(locsort2{i}(:,3)',n1,1));
    dx12corr{i} = dx12{i} + repmat(dx_offset{i},1,n2);
    dy12corr{i} = dy12{i} + repmat(dy_offset{i},1,n2);
    dz12corr{i} = dz12{i} + repmat(dz_offset{i},1,n2);
    dr12{i} = sqrt(dx12{i}.^2 + dy12{i}.^2 + dz12{i}.^2);
    dr12corr{i} = sqrt(dx12corr{i}.^2 + dy12corr{i}.^2 + dz12corr{i}.^2);
    
    if plot_all_figures
        % plot absolute offset in each dimensions
        x_edges = -1000:offset_binsize:1000;
        [nx,x_edges] = histcounts(dx12corr{i}(:),x_edges);
        [ny,y_edges] = histcounts(dy12corr{i}(:),x_edges);
        [nz,z_edges] = histcounts(dz12corr{i}(:),x_edges);

        plot((x_edges(2:end) + x_edges(1:end-1))/2,smooth(nx/sum(nx),5),'DisplayName',['dx12, ', num2str(i)]);
        plot((y_edges(2:end) + y_edges(1:end-1))/2,smooth(ny/sum(ny),5),'DisplayName',['dy12, ',num2str(i)]);
        plot((z_edges(2:end) + z_edges(1:end-1))/2,smooth(nz/sum(nz),5),'DisplayName',['dz12, ',num2str(i)]);
    end
end

%% plot pair distribution
%if plot_all_figures
    figure;
    hold;
    r_edges = 0:offset_binsize:10000;
    for i=1:numel(locsort1)
        [nr{i},r_edges] = histcounts(dr12corr{i}(:),r_edges);
        denom = pi*(r_edges(2:end).^2 - r_edges(1:end-1).^2);
        plot((r_edges(2:end) + r_edges(1:end-1))/2,nr{i}./(denom*sum(nr{i})),'DisplayName',['dr12, ',num2str(i)]);
    end
%end

%% 5) match pairs of colocalized spots 
%threshold value choice based on visual inspection of pair distributions

%Idx: cell array that combines all spots or each data set.
%Idx{k} is the list of pair attempts in dataset k. It has the same number
%of rows as the number of spots in channel 1 in the kth dataset (only counting the non-background spots, after
%thresholding)
    %Idx{k} :
    %col 1: index of channel 1 spot (0 for channel 2 spot that doesnt
    %have a channel 1 counterpart)
    %col 2: index j of nearest channel 2 neighbor found for spot in channel
    %1 (0 if no channel 2 counterpart)
    %col 3: distance dr = distance (corrected) betwenn spot i in channel 1 and spot j in
        %channel 2
    %col 4: 1 if the pair is valid (i.e. below the distance threshold, and the
        %spots are engaged in only one pair), 0 otherwise.
    %col 5: dx = xspot_i_in_channel1 - xspot_j_in_channel2 (corrected for offset and aberrations)
    %col 6: dy = yspot_i_in_channel1 - yspot_j_in_channel2 (corrected for offset and aberrations)
    %col 7: dz = zspot_i_in_channel1 - zspot_j_in_channel2 (corrected for offset and aberrations)
    %col 8: xspot_i_in_channel1 (corrected for offset and aberrations)
    %col 9: yspot_i_in_channel1 (corrected for offset and aberrations)
    %col 10: zspot_i_in_channel1 (corrected for offset and aberrations)
    %col 11: xspot_j_in_channel2
    %col 12: yspot_j_in_channel2
    %col 13: zspot_j_in_channel2
    %col 14: distance dr = distance (not corrected) betwenn spot i in channel 1 and spot j in
        %channel 2

%based on visual inspection at previous step, I set the threshold to 300nm.
dist_thresh = repmat(300,size(locsort1));

nmatches =    zeros(size(locsort1,2),1);
frac_coloc1 = zeros(size(locsort1,2),1);
frac_coloc2 = zeros(size(locsort1,2),1);
jacc12 =      zeros(size(locsort1,2),1);

for k=1:numel(locsort1)
    n1(k) = size(locsort1{k},1);
    n2(k) = size(locsort2{k},1);
    
    Idx{k} = find_matching_spots(dr12corr{k},dist_thresh(k));
    Idx{k}(:,4) = Idx{k}(:,1).*Idx{k}(:,2) ~=0;
    
    for i=1:size(Idx{k},1)
        if Idx{k}(i,4) ~= 0
            Idx{k}(i,5:7) = [dx12corr{k}(Idx{k}(i,1),Idx{k}(i,2)),...
                dy12{k}(Idx{k}(i,1),Idx{k}(i,2)),...
                dz12{k}(Idx{k}(i,1),Idx{k}(i,2))];
        else
            Idx{k}(i,5:7) = NaN;
        end    
        if Idx{k}(i,1) ~= 0
            Idx{k}(i,8:10) = locsort1{k}(Idx{k}(i,1),1:3);
        end
        if Idx{k}(i,2) ~= 0
            Idx{k}(i,11:13) = locsort2{k}(Idx{k}(i,2),1:3);
        end
        
        if Idx{k}(i,4) ~= 0
        	Idx{k}(i,14) = dr12{k}(Idx{k}(i,1),Idx{k}(i,2));
        else
            Idx{k}(i,14) = NaN;
        end
        
    end
    nmatches(k) = sum(Idx{k}(:,4)~=0);
    frac_coloc1(k) = nmatches(k)/n1(k);
    frac_coloc2(k) = nmatches(k)/n2(k);
    jacc12(k) = nmatches(k)/( n1(k) + n2(k) - nmatches(k));
end

%display the median jaccard over all datasets
median(jacc12)

%% 6) compute translation offset between channels

%average offset for each dataset, based on paired spots
%offset (i,1:3) = dx, dy dz average offset for ith dataset
for i=1:numel(Idx)
    offset(i,:) = nanmean(Idx{i}(:,5:7)); 
end

%%%%%%%%%%%%%%%%%%% 
% Old stuff
% pos_bins = 5;
% 
% dx_vs_x = [];
% for i=1:numel(Idx)
%     dx_vs_x = [dx_vs_x; Idx{i}(:,5:10) ];
% end
% 
% xmin = min(dx_vs_x(:,4));
% xmax = max(dx_vs_x(:,4));
% 
% ymin = min(dx_vs_x(:,5));
% ymax = max(dx_vs_x(:,5));
% 
% zmin = min(dx_vs_x(:,6));
% zmax = max(dx_vs_x(:,6));
% 
% dx_vs_x(:,7) = ceil(pos_bins*(dx_vs_x(:,4) -xmin)/(xmax-xmin));
% dx_vs_x(:,8) = ceil(pos_bins*(dx_vs_x(:,5) -ymin)/(ymax-ymin));
% dx_vs_x(:,9) = ceil(pos_bins*(dx_vs_x(:,6) -zmin)/(zmax-zmin));
%%%%%%%%%%%%%%%%%


%fit aberrations 
%model is dx = quad_function(x,y) / dy = quad_function(x,y) / dz = quad_function(x,y)
%function is in the 'useful' folder
for k=1:numel(Idx)
    Idxtmp = Idx{k}(Idx{k}(:,4)~=0,:);
    params_dx(k,:) = quadratic_estimate3D_old(Idxtmp(:,7:9),Idxtmp(:,4));
    params_dy(k,:) = quadratic_estimate3D_old(Idxtmp(:,7:9),Idxtmp(:,5));
    params_dz(k,:) = quadratic_estimate3D_old(Idxtmp(:,7:9),Idxtmp(:,6));
end






