function [] = compute_msd(X)

n_detections = size(X, 1);
dt = 1:n_detections - 1;

for j = 1 : n_detections - 1
    
    dr = []; 
    k = 0;
    tmp_msd = NaN;
    for i=1:n_detections - dt -1
        dr2 = sum(X(i,:) - X(i+dt,:)).^2;
        if ~isnan(dr)
            k = k+1;
            if k = 1;
                tmp_msd = 
            else
                tmp_msd = tmp_msd + dr;
            end
        
    end
    
    
    % Square displacement in bulk
    dX = X(j+1:end,:) - repmat(X(j,:), [(n_detections-j) 1] );
    dr2 = sum( dX .* dX, 2);

    % Store for mean computation / Knuth
    n_msd(index_in_all_delays)     = n_msd(index_in_all_delays) + 1;
    delta = dr2 - mean_msd(index_in_all_delays);
    mean_msd(index_in_all_delays) = mean_msd(index_in_all_delays) + delta ./ n_msd(index_in_all_delays);
    M2_msd2(index_in_all_delays)  = M2_msd2(index_in_all_delays) + delta .* (dr2 - mean_msd(index_in_all_delays));
end

n_msd(1) = n_detections;
std_msd = sqrt( M2_msd2 ./ n_msd ) ;

% We replace points for which N=0 by Nan, to later treat
% then as missing data. Indeed, for each msd cell, all the
% delays are present. But some tracks might not have all
% delays
delay_not_present = n_msd == 0;
mean_msd( delay_not_present ) = NaN;

obj.msd{index} = [ delays mean_msd std_msd n_msd ];